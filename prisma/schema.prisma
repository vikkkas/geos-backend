generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Owner {
  id          String     @id @default(uuid())
  firstName   String
  lastName    String
  email       String     @unique
  phone       String    @unique
  address     String?
  dob         DateTime?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  vehicles    Vehicle[]
}

// ----------------------

model Vehicle {
  id                     String                @id @default(uuid())
  ownerId                String
  make                   String
  model                  String
  variant                String?
  fuelType               String
  color                  String?
  yearOfManufacture      Int
  chassisNumber          String                @unique
  engineNumber           String                @unique
  odometer               Int?
  vehicleType            String?
  rtoLocation            String?
  registrationNumber     String                @unique
  insurancePolicyNumber  String?
  createdAt              DateTime              @default(now())
  updatedAt              DateTime              @updatedAt

  owner        Owner       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  services     VehicleServiceLog[]
  refuels      VehicleRefuelLog[]
  insurances   VehicleInsurance[]
  documents    VehicleDocument[]
}

// ----------------------

model VehicleServiceLog {
  id                String    @id @default(uuid())
  vehicleId         String
  serviceDate       DateTime
  serviceType       String
  stationName       String
  stationAddress    String?
  odometerAtService Int
  cost              Decimal   @db.Decimal(10, 2)
  notes             String?
  createdAt         DateTime  @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

// ----------------------

model VehicleRefuelLog {
  id                 String    @id @default(uuid())
  vehicleId          String
  refuelDate         DateTime
  fuelType           String
  quantityLitres     Decimal   @db.Decimal(6, 2)
  totalCost          Decimal   @db.Decimal(10, 2)
  odometerAtRefuel   Int
  stationName        String?
  location           String?
  createdAt          DateTime  @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

// ----------------------

model VehicleInsurance {
  id              String    @id @default(uuid())
  vehicleId       String
  policyNumber    String
  provider        String
  premiumAmount   Decimal   @db.Decimal(10, 2)
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(true)
  createdAt       DateTime  @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

// ----------------------

model VehicleDocument {
  id           String    @id @default(uuid())
  vehicleId    String
  docType      String
  fileUrl      String
  fileName     String?
  validFrom    DateTime?
  validTill    DateTime?
  uploadedAt   DateTime  @default(now())

  vehicle Vehicle @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
}

// ----------------------

model User {
  id          String     @id @default(uuid())
  name        String
  email       String     @unique
  passwordHash String
  createdAt   DateTime   @default(now())
  lastLogin   DateTime?

  @@map("users")
}